from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import text
import re

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///malware.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Model Database
class MalwareAttack(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    attack_type = db.Column(db.String(50), nullable=False)  # Jenis serangan
    severity = db.Column(db.String(20), nullable=False)  # Tingkat keparahan

    def __repr__(self):
        return f'<MalwareAttack {self.name}>'

@app.route('/')
def index():
    # Tampilkan semua data serangan malware
    malware_attacks = db.session.execute(text('SELECT * FROM malware_attack')).fetchall()
    return render_template('index.html', malware_attacks=malware_attacks)

# Validasi input
def validate_input(name, attack_type, severity):
    if not name or not name.strip():
        return False, "Name cannot be empty or whitespace"

    if re.search(r"['\";=%]+", name): 
        return False, "Name contains invalid characters"

    valid_attack_types = ['Virus', 'Worm', 'Trojan', 'Ransomware', 'Spyware']
    if attack_type not in valid_attack_types:
        return False, f"Attack type must be one of {', '.join(valid_attack_types)}"

    valid_severities = ['Low', 'Medium', 'High', 'Critical']
    if severity not in valid_severities:
        return False, f"Severity must be one of {', '.join(valid_severities)}"

    return True, None

@app.route('/add', methods=['POST'])
def add_malware():
    name = request.form['name']
    attack_type = request.form['attack_type']
    severity = request.form['severity']

    # Validasi input
    is_valid, error_message = validate_input(name, attack_type, severity)
    if not is_valid:
        return error_message, 400

    # Tambah data serangan malware
    new_malware = MalwareAttack(name=name, attack_type=attack_type, severity=severity)
    db.session.add(new_malware)
    db.session.commit()
    return redirect(url_for('index'))

@app.route('/delete/<int:id>', methods=['GET'])
def delete_malware(id):
    malware = MalwareAttack.query.get_or_404(id)  # Ganti Malware dengan MalwareAttack
    db.session.delete(malware)
    db.session.commit()
    return redirect(url_for('index'))
@app.route('/edit/<int:id>', methods=['GET', 'POST'])
def edit_malware(id):
    malware = MalwareAttack.query.get_or_404(id)  # Ganti Malware dengan MalwareAttack
    if request.method == 'POST':
        malware.name = request.form['name']
        malware.attack_type = request.form['attack_type']
        malware.severity = request.form['severity']
        db.session.commit()
        return redirect(url_for('index'))
    return render_template('edit.html', malware=malware)
app = app
